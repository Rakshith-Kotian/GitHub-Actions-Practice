# Note this file is using variables and secrets added in github repo itself in setting (assigned manually)
# secrets cant be printed in actions but it can be passed to runner and then used/printed there. but variables can be printed anywhere as its not confidential
# 4 types
# adding vars,secrets and env
name: All about variables,secrets and environment

on: 
  workflow_dispatch:
    inputs:
      UIENV:
        description: 'Select a environment where tests need to be run'
        required: true
        default: 'Test'
        type: choice
        options:
          - Test
          - Stage
          - PreProd
jobs:
  test1:
    runs-on: ubuntu-latest
    steps:
      - name: Display general variable name
        run: |
          echo "general repo variable value is: ${{ vars.GNRLVAR }}"

  test2:
    runs-on: ubuntu-latest
    steps:
      - name: Display general secret name
        run: |
          echo "general repo secret value is: ${{ secrets.GNRLSEC }}"

  test3:
    runs-on: ubuntu-latest
    environment: TESTENV
    steps:
      - name: Display environment variable name
        run: |
          echo "mentioned environment variable value is: ${{ vars.ENVVAR }}"

  test4:
    runs-on: ubuntu-latest
    environment: TESTENV
    steps:
      - name: Display environment secret name
        run: |
          echo "mentioned environment secret value is: ${{ secrets.ENVSEC }}"

# lets say there are 3 environament used for testing , so 3 environment and its variables are saved in github , those only should be used to run code in runner
# to handle it first create a environment selection dropdown then based on environment selection get their values and assign them same env variable name defined in code inside runner
# so variables/secrets picked up from github environments and passed to the runner for execution
  
  test5:
    runs-on: ubuntu-latest
    environment: ${{ inputs.UIENV }}  # this can be hardcoded if there is only one environment
    env:
        userName: ${{ vars.USERNAME }}
    steps:
        - name: using environemtn variables in runner from created environent
          run: echo "logged in with user name ${{ env.userName }} in ${{ inputs.UIENV }} environment"
# Note: in this case only username is present , in real life multiple values or secrtes might be there , everything should be mapped and passed to code..