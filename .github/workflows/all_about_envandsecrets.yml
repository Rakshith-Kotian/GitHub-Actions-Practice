# Note this file is using variables and secrets added in github repo itself in setting (assigned manually)
# secrets cant be printed in actions but it can be passed to runner and then used/printed there. but variables can be printed anywhere as its not confidential
# 4 types are Repo secrets & Variables can be called in any action directly with vars & secrets context , environment secrets and variables are also called using vars and secrets context but only after we mention its environemnt ( environemt: can be global or job specifid depending on use case)
# Note: both secrets and variables are repo specific and not user specific ( 3 types are organisation vars/secrets, repo vars/secrets, environment vars/secrets -- these are used based on theor scope and can be seen by anyone with that repo access)( for secrets only key can be seen)
name: All about variables,secrets and environment

on: 
  workflow_dispatch:
    inputs:
      UIENV:
        description: 'Select a environment where tests need to be run'
        required: true
        default: 'Test'
        type: choice
        options:
          - Test
          - Stage
          - PreProd
jobs:
  test1:
    runs-on: ubuntu-latest
    steps:
      - name: Display general variable name
        run: |
          echo "general repo variable value is: ${{ vars.GNRLVAR }}"

  test2:
    runs-on: ubuntu-latest
    steps:
      - name: Display general secret name
        run: |
          echo "general repo secret value is: ${{ secrets.GNRLSEC }}"

  test3:
    runs-on: ubuntu-latest
    environment: TESTENV
    steps:
      - name: Display environment variable name
        run: |
          echo "mentioned environment variable value is: ${{ vars.ENVVAR }}"

  test4:
    runs-on: ubuntu-latest
    environment: TESTENV
    steps:
      - name: Display environment secret name
        run: |
          echo "mentioned environment secret value is: ${{ secrets.ENVSEC }}"

# lets say there are 3 environament used for testing , so 3 environment and its variables are saved in github , those only should be used to run code in runner
# to handle it first create a environment selection dropdown then based on environment selection get their values and assign them same env variable name defined in code inside runner
# so variables/secrets picked up from github environments and passed to the runner for execution
  
  test5:
    runs-on: ubuntu-latest
    environment: ${{ inputs.UIENV }}  # this can be hardcoded if there is only one environment
    env:
        userName: ${{ vars.USERNAME }}
        password: ${{ secrets.PASSWORD }}
    steps:
        - name: using environemtn variables in runner from created environent
          run: echo "logged in with user name ${{ env.userName }} in ${{ inputs.UIENV }} environment"
# Note: in this case only username and password is present , in real life multiple values or secrtes might be there , everything should be mapped and passed to code..
# Now run this action manually , select enviroment , and click run ( varibles will be picked up according to selected environemnt)


# Adding Repository Secrets Or Variables
# Go to Your Repository:
# Navigate to the GitHub page of your repository.
# Access Settings:
# Click on the Settings tab (usually found at the top right).
# Select Secrets and Variables:
# On the left sidebar, click on Secrets and variables.
# Then click on Actions under that section.
# Add a New Secret / Add a New Variable:
# Click on the New repository secret / New repository variables button.
# Enter a name for your secret / variable (e.g., MY_SECRET) and the value you want to store.
# Click Add secret / variable to save it.

# Adding an Environment in GitHub
# Go to Your Repository:
# Open the GitHub page for your repository.
# Access Settings:
# Click on the Settings tab at the top of the page.
# Select Environments:
# In the left sidebar, find and click on Environments under the Security section.
# Add a New Environment:
# Click on the New environment button.
# Name Your Environment:

# Enter a name for your environment (e.g., staging, production, etc.).
# Configure Environment Settings (optional):
# You can set specific rules, like required reviewers, protection rules, and secrets that are only available in this environment.
# Add Environment Variables or secrets (if needed):
# After creating the environment, you can add environment-specific secrets by clicking on the environment name and then selecting Add secret.
# Save Changes:
# Make sure to save any changes you made
# then they can be used like above in test5 job