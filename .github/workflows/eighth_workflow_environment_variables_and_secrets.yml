# below two points might take priority over all below code poitns
# main important:  we have general secrets and general repository variables ( which is applicable to entire repo)
# also we have environment ( + secrets & variables which is specific to only that environment)
# both secrets and variables are stored in capital letter keys 
# to use secrets and vars generally anywhere just call them using secrets.mySecret, vars.myVar etc
# to call environment specific secrets and variables 
#first mention environment name then call it using secret.mySecret2 , vars.myVar2 ( this will give sceret and vars specic to that env itself)
# now to use env variable either hardcode it
# or best option is goto repo settings , environment create a environment and inside that create secrets or env variables
# to use this environment 
# first call that env
# now use its secret or variable ( under scope of that environment)
# environment: dev
# env: 
#   username: ${{vars.USERNAME}
#   password: $ {{ secrets.PASSWORD}}
# now this can be global or inside a job only..

# Note: do not replace env variables after assigned by github workflow file , unless its necessary, else it might break..

# also check we cant print secrets in girhub workflows file , but can do environment variables ( but can we print a secret inside runner after assigning it to other var and console.log inside a runner) check -- it should be possible because as per me but still check
# + add a dropdown to select environment manually in action workflow file ( also add a dropdown to override exiting variables inside a repo) ( or just add a dropdown to assifn env variables if you dont want to assign any values in github repo itself)( also add a dropdown or textbox to fill other data..
# if incase workflow is triggered on push , add default environment assigned in dropdown itself..
#https://docs.github.com/en/actions/managing-workflow-runs-and-deployments/managing-deployments/managing-environments-for-deployment

# Note: in these cases best approach is manual trigger with some dropdown values assigned as env, 
# secrets and env variables are cant be print

# for full detail refer all_about_envandsecrets.yml file

name: Environment variables Setup & Secrets
# Note: storing credentials in workflow file is not ideal , this is just an exercise
on: workflow_dispatch
env:                        # workflow level env variables ( can be used for all jobs)
    USERNAME: John Doe
    PASSWORD: ${{ secrets.PASSWORD }}  # im getting passwords from secrets stored in github website ( see notes to learn how to save a secret variable in github website ) 
jobs:
    test: 
        env:                # job level env variables ( only for this job)
            EXCELWORKBOOKNAME: myExcel1
            EXCELSHEETNAME: mySheet1
        runs-on: ubuntu-latest
        steps:                
          - name: Display general env variable name
            run: |
              echo "Username is: ${{ env.USERNAME }}"
              echo "ExcelWorkbookName is: ${{ env.EXCELWORKBOOKNAME }}"
              echo "Password is: ${{ secrets.PASSWORD }}"

# Note : secret values cannot be printed , github actions hides the access of secrets from env context
# we can get env object name by using env context

    testenv:
        environment: demoenv
        runs-on: ubuntu-latest
        steps:                
          - name: Display environemnt specific secret password
            run: |
              echo "Environment specific secret pwd is: ${{ secrets.PASSWORD }}"

# Note: if i run some code and those code uses same environment then they also get the same values assign by manually in eorkflow file like first job , addign through a environment in repo settings.
# i created demoenv in github desktop and defined different username
# here in both jobs password secret is present , but in second job here it pics username defined in "demoenv" environment as specified in job ( it wont pick general Username secret which is accessible for all jobs) 
# this is usefull when we need top run same job with different credentials for acceessing different environemnts
# Note : for an created enviroment we can  define both env specific environment variables + secrets as well
# in reality create an environment like stage, test, production in github repo --> settings --> environments tab and use them in workflow file ( add a dropdown to select which environment testing is going on ,based on that read env variables and perform testing)
# if i create some env & its variables and use that env in workflow , the related codes will use that env variables