Learn : config file changes and then running script , env valriable setup and then run script ...

Git:
Free Version controll system installed to system, branches, fork, commmits, merge, rollback, sync fork etc

Github:
Tool which uses git, repository, push&pull, clone, access management, issues, pull requests etc

( After installing Git, you can also configure it - most importantly, you can set a username and email address that will be connected to all your code snapshots.
This can be done via:
git config --global user.name "your-username"
git config --global user.email "your-email"
You can learn more about Git's configuration options here: https://git-scm.com/docs/git-config )

Github Actions:
https://docs.github.com/en/actions - learn every details here
Repository workflow automation service ( CI/CD Pipeline )

Uses of Github Actions:
Continuos Integration --> build code changes , test & merge automatically
Continuous Delivery/Deployment --> publish new version automatically
Automatic code review
Issue management etc

Learn Github Commands all:
staging, rollback,commit, reset, stage, push, branch, merge etc....

Pricing:
Public Repo - free
Private repo - some costs involved

-----------------------------------------------------------------------------------------------------------------

Course Content:

Key Elements of Github Actions:
* Workflows 
* Jobs
* Steps

A Repositopry can have multiple workflows and each workflow can have multiple jobs and each jobs have several steps ( Eg: Teamcity --> a workflow can run one job after another completed --> download, encryt & decrypt files etc..)

Workflow - can be manually triggered / we can have some conditions/ triggers ( call it as events )defined to run a workflow automatically
Jobs - jobs will have runners / agents we can say ( from github server) to run jobs , we can add condition for jobs too
Steps - steps can be a command to run code or any action , steps run in series and also can be conditional

Eg: workflow - download files ( manual or auto trigger , we might need to give some properties )
    Job      - 1) download file from server/S3 2) decrypt those files
	Steps    -  the above two jobs have respective steps attached to them
	
	
**************************************	
Github Dummy login for Practice: 
Goto created public repo with name under my Github Profile--> GitHub-Actions-Practice

**************************************

Creating a Simple Workflow just to readme file:

1) Goto my GitHub repository ( here public repo "GitHub-Actions-Practice" )
2) Click "Actions" tab
3) Click on "Simple Workflow" template and click "Configure"
4) Give a name to creating workflow ( it will ve saved under Repo/.github/workflows/workflow_name.yml path) ( workflow will be a .yml file - yml is a simple formated text file) ( also we can do this locally and push this to repository to its proper path)
5) now delete existing configaration lines and create my own config as required

configuring workflow (.yml) file:
name: name of the workflow ( can be anything user defined)
on: conditon when workflow to be executed ( should contain github issues event names eg: workflow_dispatch )( github events will be learned in later sections of this course )
jobs: will have list of jobs to run(with GitHub runner & steps ( name & run )name to be specified )( make sure jobs configaration is properly given with 1 tab indentation in .yml file ) ( runner is nothis but specifing server to run a job, GitHub runners: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners )

now job need to be defined with steps 
every job can have multiple steps with specified name, and steps will have specific actions/ command to perform or run 

Example of Simple Workflow created:

name: First Workflow  										-- define workflow name
on: workflow_dispatch  										-- conditon to run workflow ( with event specified ) ( workflow_dispatch will add a button on Git UI to trigger a workflow manually)
jobs:                  										-- define jobs config
  first_job:           										-- first job name to be executed
    runs-on: ubuntu-latest    								-- define runner name
    steps:                    								-- steps list for a job
      - name: print greeting  								-- define first step name
        run: echo "Hello, I'm Learning GitHub Actions"  	-- first step run command ( action )
      - name: print goodbye   								-- define second step name
        run: echo "Good Bye!" 								-- second step run command ( action )
		
6) now commit the configaration to repo ( if done locally it will be committed through pull requests )
7) now goto actions tab again and open my created workflow
8) click on run workflow & now reload action tab it will show workflow run details , job details, step details, console statements, whether its pass or failed etc.. ( all can be viewed step by step )
9) since we gave event as workflow_dispatch we need to trigger workflow manually in github actions tab..

Note: (
Running Multi-Line Shell Commands
Thus far, you learned how to run simple shell commands like echo "Something" via run: echo "Something".

If you need to run multiple shell commands (or multi-line commands, e.g., for readability), you can easily do so by adding the pipe symbol (|) as a value after the run: key.

Like this:
...
run: |
    echo "First output"
    echo "Second output"
This will run both commands in one step. )

**************************************

Github Events: ( workflow can be triggered based on these triggered events ) ( check all event & its sub config in github actions documentation )
More Info: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

Example: 
github repo can detect push, pull , fork , create , issues, watch etc 
other non repo events  workflow_dispatch ( to trigger workflow manually) , repository_dispatch( trigger workflow using rest api) , schedule ( schedule workflow ), workflow_call ( called by another workflow ) etc..
Note : each event also have sub events eg : pull request has pull request opened, closed, edited etc based on that workflow can be triggered  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request

Note: Jobs will run on github provided server using code from repository ( it wont run in github repository itself , repo is just folders in github database) ( so we need provide code to server for any run purpose )
this will be done using "Actions" -- > jobs will make use of "Actions" in steps to run the workflow after getting all dependencies/code etc//

Github Actions:
run --> is similar action used to run shell commands in github server 
Action is a custom application that performs complex or repeated tasks ( we can create own custom actions ) ( else we can use actions created by other  to our workflow) ( action cretaed by others will a also a repo containing codes )

Eg for action:
checkout action : https://github.com/actions/checkout -- this action is used to checkout any github repo , this action is official and maintained by github team
Offical marketplace for actions : https://github.com/marketplace/actions/checkout (https://github.com/marketplace)
The actions uses "uses" key and value we can get using that specific actions website
eg: checkout action is defined as uses: actions/checkout@v3   --> this value i got from official website https://github.com/actions/checkout  ( make sure to give a specfific version so if actions updated in future exiting workflow wont be broken )
also we can further configure actions using "with" keyword --> refer https://github.com/actions/checkout 

Github runners will have most of dependencies like node js by itself , to check which runner has which dependency refer --> https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#using-preinstalled-software & https://github.com/actions/runner-images & https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md  check what and all installed in runner here
since ubuntu latest already has nodejs ,(i dont need to add node js installation step using any other actions)
Note: if runner dont have node js , then add a step of installing node js and then use "actions/setup-node" to install node js in selected runner:  https://github.com/actions/setup-node  (refer instructions in that official doc)

Note: if runner has lower version of node installed , then i can use setup-node action to installed higher version of node in runner to run my workflow ( usefull when code is developed using latest version and runner has outdated version )

Note: ( this issue might come if others using someone elses repo , they need to have a personal access token to trigger a workflow ) make sure user workflow access --> sometimes if repo doesnt have workflow creation access then goto --> github settings --> developer setting --> goto personal access token --> generate new token --> selct both repo and workflow --> click generate token  ( now delete current token and add new generated token using youtube )

**************************************

Job Failure Analysis:
Similar to Termial --> github actions workflow will display all failure steps , just open every jobs and steps and check reason for failure

**************************************
More about jobs (Series & Parallel run)
^ every job have its own runner and same workflow jobs can have different runners
^ build code means building the code , i.e code is transferred to mobile app , or website etc
^ Note: By default jobs in same workflow runs in parallel
^ To run job in series "needs" keyword is used , 
Eg:
deploy:                          
    needs: test   --> deploy job will run only if test job is passed..
	
to wait for multiple jobs to finish give needs: [test,job2,job3]  etc.. 
	
Development: Code is written, bugs are fixed, and new features are added.
Build: The code is compiled and ready for testing or deployment.
Test: A team of testers use a testing environment to ensure the system works correctly and meets all requirements.
Deploy: The release version of the code is deployed to a production environment where end users can access the application. 

**************************************

Multiple Triggers/events :
Eg: we can run a workflow for different kind of events , eg: for each push , each PR , manual run etc ....
for that:  just give     on: [push, workflow_dispatch, any other event...] in a array format

we can configure push details to specific branches / specific person etc , or PR to only main branch , we can configure anythingh based on condition , anything we can prepare

**************************************
Github Actions Experessions or Context:
Github actions will store or provide some metadata while running jobs , we can access them using context and print them using expressions
Eg: "github" is a context --> The github context contains information about the workflow run and the event that triggered the run. --> https://docs.github.com/en/actions/learn-github-actions/contexts#github-context  --> this will display repo owner, id, URL etc..
https://docs.github.com/en/actions/learn-github-actions/contexts
https://docs.github.com/en/actions/learn-github-actions/expressions

This will be usefull if we are perfroming actions on other repository from our repo etc , i.e: if we dont use checkout action and manually clone our repo to server and use that code, than we can see github repo logs , name etc ..

**************************************

Note: since build, test, deploy is done in series , we can create 3 different jobs for it or we can make as 3 steps in a single job , because if one step fails next steps wont run ( but for clarity  making different jobs is best )

**************************************